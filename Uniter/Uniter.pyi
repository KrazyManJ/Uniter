from typing import TypeVar, Generic

__Q = TypeVar("__Q",bound=Unit)


class Unit(Generic[__Q]):

    @property
    def symbol(self) -> str: ...

    @property
    def unit_type(self) -> UnitType: ...

    @property
    def sign(self) -> UnitType: ...

    def convert_to(self, unit: type[__Q]) -> __Q: ...

    @classmethod
    def default_unit(cls) -> __Q: ...

    @classmethod
    def units_by_category(cls, unit_type: UnitType) -> list[__Q]: ...

    def __init__(self, value): ...
    def __add__(self, other: __Q) -> __Q: ...
    def __sub__(self, other: __Q) -> __Q: ...
    def __getitem__(self, item: type[__Q]) -> __Q: ...
    def __mul__(self, other: int | float) -> __Q: ...
    def __rmul__(self, other: int | float) -> __Q: ...
    def __pow__(self, power: int | float, modulo = ...) -> __Q: ...
    def __truediv__(self, other: int | float) -> __Q: ...
    def __floordiv__(self, other: int | float) -> __Q: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...

class Unitor:
    def __init__(self, symbol: str = ..., mp : int | float = ..., unit_type: UnitType = ...): ...
    def __call__(self): ...

class Quantitor:
    def __init__(self, sign: str): ...
    def __call__(self): ...

class UnitType:
    METRIC = ...
    IMPERIAL = ...
    ASTRONOMICAL = ...